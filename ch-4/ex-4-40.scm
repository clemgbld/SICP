(define (distinct? items) 
    (cond ((null? items) true)
          ((null? (cdr items)) true)
          ((member (car items) (cdr items)) false) 
          (else (distinct? (cdr items)))))


(define (multiple-dwelling)
  (let ((fletcher (amb 1 2 3 4 5)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
	(let ((cooper (amb 1 2 3 4 5)))
	  (require (not (= cooper fletcher)))
      (require (not (= (abs (- fletcher cooper)) 1)))
      (require (not (= cooper 1)))
	  (let ((miller (amb 1 2 3 4 5)))
		(require (not (= miller cooper)))
		(require (not (= miller fletcher)))
		(require (> miller cooper))
		(let ((smith (amb 1 2 3 4 5)))
		  (require (not (= smith miller)))
		  (require (not (= smith cooper)))
		  (require (not (= smith fletcher)))
		  (require (not (= (abs (- smith fletcher)) 1)))
		  (let ((baker (amb 1 2 3 4 5)))
			(require (not (= baker smith)))
			(require (not (= baker miller)))
			(require (not (= baker cooper)))
			(require (not (= baker fletcher)))
			(require (not (= baker 5)))
			(list (list 'baker baker)
				  (list 'cooper cooper)
				  (list 'fletcher fletcher)
				  (list 'miller miller)
				  (list 'smith smith))))))))